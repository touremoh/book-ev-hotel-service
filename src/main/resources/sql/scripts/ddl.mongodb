use bevhot;

db.SubscriptionPlans.drop();
db.Hotels.drop();
db.PaymentsInformation.drop();
db.HotelsLeads.drop();
db.Users.drop();
db.VisitorSearches.drop();
db.AdminDashboards.drop();
db.OTPCodes.drop();
db.MailingList.drop();
db.SearchKeywords.drop();
db.ExcludedSearchWords.drop();

db.createCollection("SubscriptionPlans", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["subscriptionType", "relatedCountry", "currency", "monthlyAmount", "yearlyAmount"],
      properties: {
        subscriptionType: {
          bsonType: "string",
          description: "Type of the subscription (standard, basic, premium)"
        },
        relatedCountry: {
          bsonType: "string",
          description: "Country in which the subscription is applied"
        },
        currency: {
          bsonType: "string",
          description: "The currency used in that country"
        },
        monthlyAmount: {
          bsonType: "decimal",
          description: "The amount the customer will be charged each month if he selects monthy payments"
        },
        yearlyAmount: {
          bsonType: "decimal",
          description: "The amount the customer will be charged each year if he selects yearly payments"
        }
      }
    }
  }
});

db.createCollection("Hotels", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["hotelName", "location", "websiteLink"],
      properties: {
        hotelName: {
          bsonType: "string",
          description: "Name of the hotel"
        },
        location: {
          bsonType: "object",
          required: ["streetAddress", "extendedAddress", "city", "zipOrPostalCode", "stateOrProvince", "country"],
          properties: {
            country: {
              bsonType: "string",
              description: "Country of the hotel"
            },
            stateOrProvince: {
              bsonType: "string",
              description: "State or province of the hotel"
            },
            zipOrPostalCode: {
              bsonType: "string",
              description: "Zip code or postal code of the hotel"
            },
            city: {
              bsonType: "string",
              description: "City of the hotel"
            },
            streetAddress: {
              bsonType: "string",
              description: "Street address of the hotel"
            },
            extendedAddress: {
              bsonType: "string",
              description: "Extended address of the hotel"
            }
          },
          description: "The address that will be shown on the invoice"
        },
        websiteLink: {
          bsonType: "string",
          description: "Link of the website. This will be used as a call to action for visitor"
        },
        amenities: {
          bsonType: "array",
          description: "List of amenities provided by the hotel"
        },
        chargingInformation: {
          bsonType: "object",
          required: ["numberOfConnectors", "availabilityTime", "accessibility", "energyCost"],
          properties: {
            numberOfConnectors: {
              bsonType: "int",
              description: "Number of the connectors open to customers"
            },
            maxPower: {
              bsonType: "int",
              description: "The maximum power expressed in kW the charging point can deliver"
            },
            availabilityTime: {
              bsonType: "string",
              description: "Tells which time of the day the charger is open"
            },
            accessibility: {
              bsonType: "string",
              description: "Tells us if the charger is open to public or to the customers"
            },
            chargingNetwork: {
              bsonType: "string",
              description: "Name of the company that the charging point. Eg. Tesla"
            },
            energyCost: {
              bsonType: "object",
              required: ["price", "priceUnit"],
              properties: {
                price: {
                  bsonType: "object",
                  required: ["amount", "currency"],
                  properties: {
                    amount: {
                      bsonType: "decimal",
                      description: "value of the amount expressed in decimal number"
                    },
                    currency: {
                      bsonType: "string",
                      description: "Currency of the energy price in string format"
                    }
                  },
                  description: "Energy price expressed in object format"
                },
                priceUnit: {
                  bsonType: "string", // i.e: kWh, min, day
                  description: "Energy cost unit expressed in string format"
                }
              },
              description: "Cost of the energy in object format"
            },
            messageForCustomer: {
              bsonType: "string",
              description: "Additional information for the customer about the charging point"
            }
          }
        },
        offers: {
          bsonType: "array",
          description: "Represent a list of all offers the hotel proposed to the customers",
          properties: {
            offer: {
              bsonType: "object",
              description: "An offer made by the hotel for the EV owner",
              properties: {
                title: {
                  bsonType: "string",
                  description: "Name of the offer"
                },
                description: {
                  bsonType: "string",
                  description: "Description of the offer"
                },
                code: {
                  bsonType: "string",
                  description: "Code of the offer"
                }
              }
            }
          }
        },
        createdAt: {
          bsonType: "date",
          description: "Date at which the record was created"
        },
        lastUpdatedAt: {
          bsonType: "date",
          description: "Date at which the record was updated"
        },
        createdBy: {
          bsonType: "objectId",
          description: "ID of the person who created the record"
        },
        lastUpdatedBy: {
          bsonType: "objectId",
          description: "ID of the person who updated the record last time"
        }
      }
    }
  }
});

db.createCollection("PaymentsInformation", {
  validator: {
     $jsonSchema: {
        bsonType: "object",
        required: ["hotelId", "billingInformation", "subscriptionInformation"],
        properties: {
           billingInformation: {
              bsonType: "object",
              required: ["nameOnCard", "cardNumber", "expirationDate", "cvc", "billingAddress"],
              properties: {
                nameOnCard: {
                   bsonType: "string",
                   description: "The name of the person on the card"
                },
                cardNumber: {
                   bsonType: "string",
                   description: "The number of the card"
                },
                expirationDate: {
                   bsonType: "object",
                   required: ["month", "year"],
                   properties: {
                     month: {
                       bsonType: "int",
                       description: "Expiration month of the card. The month should be between 1 and 12"
                     },
                     year: {
                       bsonType: "int",
                       description: "Expiration year of the card. The expiration year should be anywhere from 0 to 7 years"
                     }
                   },
                   description: "Name of the person on the card"
                },
                cvc: {
                   bsonType: "string",
                   description: "Card verification value"
                },
                billingAddress: {
                   bsonType: "object",
                   required: ["streetAddress", "extendedAddress", "city", "zipOrPostalCode", "stateOrProvince", "country"],
                   properties: {
                     country: {
                       bsonType: "string",
                       description: "Country of the billing address"
                     },
                     stateOrProvince: {
                       bsonType: "string",
                       description: "State or province of the billing address"
                     },
                     zipOrPostalCode: {
                       bsonType: "string",
                       description: "Zip code or postal code of the billing address"
                     },
                     city: {
                       bsonType: "string",
                       description: "City of the billing address"
                     },
                     streetAddress: {
                       bsonType: "string",
                       description: "Street address of the billing address"
                     },
                     extendedAddress: {
                       bsonType: "string",
                       description: "Extended address of the billing address"
                     }
                   },
                   description: "The address that will be shown on the invoice"
                }
              }
            },
            subscriptionInformation: {
              bsonType: "object",
              required: ["currentPlan", "billingCycle", "amount", "accountStatus", "subscriptionDate"],
              properties: {
                currentPlan: {
                  bsonType: "string",
                  description: "The subscription plan the customer has choosen"
                },
                billingCycle: {
                  bsonType: "string",
                  description: "The interval at which the customer is charged (montly or yearly)"
                },
                amount: {
                  bsonType: "decimal",
                  description: "The amount the customer is charged (montly or yearly)"
                },
                currency: {
                  bsonType: "string",
                  description: "The currency the customer is charged (montly or yearly)"
                },
                accountStatus: {
                  bsonType: "string",
                  description: "The status of the account. Helps to know if the account is active or not"
                },
                subscriptionDate: {
                  bsonType: "date",
                  description: "The date at which the customer subscribed to the account"
                },
                nextBillingDate: {
                  bsonType: "date",
                  description: "The date at which the customer will be charged in the future"
                }
              },
              description: "Hotel subscription details"
            },
            paymentHistory: {
              bsonType: "array",
              items: {
                bsonType: "object",
                required: ["paymentDate", "cardLastFour", "chargedAmount"],
                properties: {
                  paymentDate: {
                    bsonType: "date",
                    description: "The date at wich the customer was charged"
                  },
                  cardLastFour: {
                    bsonType: "string",
                    description: "The last four digits of the card"
                  },
                  chargedAmount: {
                    bsonType: "string",
                    description: "The amount and currency the customer was charged"
                  },
                }
              },
              description: "Shows the history of all payments the customer has made"
           }
        }
     }
  }
});

db.createCollection("HotelsLeads", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["email", "fullName", "hotelId"],
      properties: {
        email: {
          bsonType: "string",
          description: "Email address of a pential customer of the hotel"
        },
        fullName: {
          bsonType: "string",
          description: "Full name of the visitor"
        },
        hotelId: {
          bsonType: "objectId",
          description: "ID of the hotel serving as a foreign key for the hotel"
        },
        recordTimestamps: {
          bsonType: "date",
          description: "Date and time when the visitor subscribed to the mailing list of the hotel"
        }
      }
    }
  }
});


db.createCollection("Users", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["email", "password", "firstName", "lastName", "userStatus"], // Added userStatus to required
      properties: {
        email: {
          bsonType: "string",
          description: "must be a string and is required"
        },
        password: {
          bsonType: "string",
          description: "must be a string and is required"
        },
        firstName: {
          bsonType: "string",
          description: "must be a string and is required"
        },
        lastName: {
          bsonType: "string",
          description: "must be a string and is required"
        },
        hotelId: {
          bsonType: "objectId",
          description: "must be an objectId and is required"
        },
        recordTimestamp: {
          bsonType: "date",
          description: "Date and time when the user created the account"
        },
        userStatus: {
          bsonType: "string",  // Define the type for userStatus
          enum: ["ACTIVE", "INACTIVE", "LOCKED", "WAITING_FOR_REGISTRATION_VALIDATION"],
          description: "Status of the user: ACTIVE, INACTIVE, LOCKED, WAITING_FOR_REGISTRATION_VALIDATION"
        },
        userRole: {
          bsonType: "string",  // Define the type for userStatus
          enum: ["ROLE_OWNER", "ROLE_MAINTAINER"],
          description: "Roles of the user: ROLE_OWNER, ROLE_MAINTAINER"
        }
      }
    }
  }
});


db.createCollection("VisitorSearches", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["searchTerm", "requestTimestamp"],
      properties: {
        searchTerm: {
          bsonType: "string",
          description: "Visitor's search terms"
        },
        userLocation: {
          bsonType: "string",
          description: "The location (city or country) from which the user is searching from"
        },
        requestTimestamp: {
          bsonType: "date",
          description: "Date and time when the visitor submitted the request"
        }
      }
    }
  }
});

db.createCollection("AdminDashboards", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["hotelId", "timesImpressions", "timesProfileViews", "timesCTAClicked", "countLeads", "recordDate"],
      properties: {
        hotelId: {
          bsonType: "objectId",
          description: "Hotel identifier (primay key)"
        },
        timesImpressions: {
          bsonType: "int",
          description: "Number of times the hotel showed-up in the visitor search results"
        },
        timesProfileViews: {
          bsonType: "int",
          description: "Number of times the visitor consulted the hotel profile"
        },
        timesCTAClicked: {
          bsonType: "int",
          description: "Number of times the visitor clicked the CTA button"
        },
        countLeads: {
          bsonType: "int",
          description: "Number of times the visitor clicked the CTA button"
        },
        recordDate: {
          bsonType: "date",
          description: "Date of the record"
        }
      }
    }
  }
});

db.createCollection("SearchKeywords", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: [ "key", "values" ],
         properties: {
            key: {
               bsonType: "string",
               description: "must be a string and is required"
            },
            values: {
               bsonType: ["array"],
               items: {
                  bsonType: "string",
                  description: "Must be a list of strings"
               },
               description: "Must be an array of strings and is required"
            }
         }
      }
   }
});


db.createCollection("MailingList", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["email", "countryOfResidence"],
      properties: {
        email: {
          bsonType: "string",
          description: "must be a string and is required"
        },
        countryOfResidence: {
          bsonType: "string",
          description: "must be an object and is required"
        },
        recordDate: {
          bsonType: "date",
          description: "Date and time when the visitor subscribed to the mailing list"
        }
      }
    }
  }
});

db.createCollection("OTPCodes", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["code", "secret", "userId"],
      properties: {
        code: {
          bsonType: "string",
          description: "OPT code"
        },
        secret: {
          bsonType: "string",
          description: "OTP Generation secret"
        },
        userId: {
          bsonType: "objectId",
          description: "ID of the user"
        }
      }
    }
  }
});


db.SearchKeywords.createIndex({key: 1});
db.MailingList.createIndex({email: 1});
db.VisitorSearches.createIndex({searchTerm: 1});
db.Users.createIndex({email: 1});
db.HotelsLeads.createIndex({email: 1});


